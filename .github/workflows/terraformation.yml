name: Terraform

on:
  push:
    tags:
    - '**beta**'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Tag Version
      id: get_version
      uses: battila7/get-version-action@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform init
      working-directory: ./terraform
      run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform format
      working-directory: ./terraform
      run: terraform fmt -check

      # Generates an execution plan for Terraform
    - name: Terraform plan
      working-directory: ./terraform
      run: AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} terraform plan -var='subdomain=${{ steps.get_version.outputs.version }}'

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terraform apply -auto-approve
  
  build:
    name: Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: yarn install
    
    - name: Build
      run: yarn build
    
    - name: Publish build artifact
      uses: actions/upload-artifact@v2
      with:
          name: build artifact
          path: dist/**/*

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [terraform, build]

    defaults:
      run:
        shell: bash

    steps:
    - name: Tag Version
      id: get_version
      uses: battila7/get-version-action@v2

    - uses: actions/download-artifact@master
      with:
        name: build artifact
        path: dist/

    - run: cat dist/

    - name: AWS CLI
      uses: ItsKarma/aws-cli@v1.70.0
